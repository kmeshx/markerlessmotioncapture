
Iname = 'sfff2.png';
I = 'sfff2.png';
ijj = [[93, 49];
[80, 47];
[64, 50];
[62, 59];
[57, 57];
[62, 70];
[48, 67];
[61, 77];
[48, 73];
[41, 44];
[49, 50];
[41, 50];
[41, 59];
[30, 52];
[50, 69];
[38, 67];
[33, 39];
[14, 31];
[3, 16]
];

ij = [[93, 49];
[80, 47];
[64, 50];
[62, 59];
[57, 57];
[62, 70];
[48, 67];
[61, 77];
[48, 73];
[41, 44];
[46, 51];
[41, 50];
[40, 59];
[32, 52];
[50, 69];
[38, 67];
[33, 39];
[14, 31];
[3, 16]
];

rps = [[93, 77];
[79, 79];
[63, 73];
[61, 71];
[61, 71];
[59, 61];
[54, 64];
[60, 50];
[45, 53];
[39, 75];
[38, 76];
[42, 70];
[39, 72];
[38, 59];
[29, 68];
[44, 79];
[34, 84];
[15, 91]];

rps(:, 2:2) = 120 - rps(:, 2:2); %MAGIC NUMBER HERE


ij(:, 1:1) = ij(:, 1:1) + 7;
ij(:, 2:2) = ij(:, 2:2) + 4;
ij(1, 1) = 100; ij(1, 2) = 53;
ij(2, 1) = 88; ij(2, 2) = 49;


rps(:, 1:1) = rps(:, 1:1) + 7;
rps(:, 2:2) = rps(:, 2:2) + 4;

rps(1, 1) = 101; rps(1, 2) = 47;
rps(:, 2:2) = 120 - rps(:, 2:2); %MAGIC NUMBER HERE


%RPS DOES NOT REQUIRE Y-AXIS TRANSFORMATION


ij2 = [[151, 45];
[134, 55];
[112, 60];
[115, 73];
[106, 73];
[119, 84];
[95, 85];
[109, 93];
[83, 94];
[73, 57];
[74, 62];
[79, 62];
[62, 67];
[64, 74];
[75, 79];
[80, 86];
[54, 53];
[32, 73];
[6, 79]];


ij1 = [[151, 45];
[134, 55];
[112, 60];

[110, 70];


[119, 84];
[95, 85];
[109, 93];
[83, 94];
[73, 57];


[76, 60];


[62, 67];
[64, 74];
[75, 79];
[80, 86];
[54, 53];
[32, 73];
[6, 79]];


ij4 = [[148, 54];

[122, 65];

[110, 68];

[115, 76];

[103, 76];

[119, 84];

[95, 85];

[109, 93];

[84, 60];

[78, 64];

[72, 62];

[79, 62];

[62, 67];

[64, 74];

[75, 79];

[80, 86];

[54, 53];

[32, 73];

[6, 79]];

xx = ij(:, 1:1);
yy = 120 - ij(:, 2:2);
%ij(:, 2:2) = 120 - ij(:, 2:2); %MAGIC NUMBER
ij = [xx, yy];
init_skel = initialize(ij, rps);

I = imread(I);
%I = rgb2gray(I);

I = imbinarize(I);
irows = size(I, 1); %icols = size(I, 2);
[row, col] = find(I == 1);
X = col; Y = irows - row;
pts = [X, Y];


epsSet = {'headneck'};
genSet = {'curfx', 'curfy', 'curbx', 'curby'};
genVals = {93, 49, 80, 47};
m1 = containers.Map(genSet, genVals);
mapSet = {m1};
eps = containers.Map(epsSet, mapSet);

theta_flag = true;
%prob = get_problem_statement(Iname, init_skel, theta_flag);
thetanew = fmincon(prob);
save;
show_oskel(thetanew, pts, init_skel);



